#user  nobody;
worker_processes  8;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  2048;
		accept_mutex on;
}

http {

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

		# this can be any application server, not just Unicorn/Rainbows!
	  upstream app_server {
	    # fail_timeout=0 means we always retry an upstream even if it failed
	    # to return a good HTTP response (in case the Unicorn master nukes a
	    # single worker for timing out).

	    # for UNIX domain socket setups:
	    # server unix:/tmp/.sock fail_timeout=0;

			# for TCP setups, point these to your backend servers
			server 127.0.0.1:15000 fail_timeout=0;
			# server 127.0.0.1:15020 fail_timeout=0;
	  }

    server {
        listen	80;
				# server_name  localhost
				client_max_body_size 3M;
				
				keepalive_timeout 6;
				
        # passenger_enabled on;
				
        root /var/www/training_conference/public;

				location / {
		      # an HTTP header important enough to have its own Wikipedia entry:
		      #   http://en.wikipedia.org/wiki/X-Forwarded-For
		      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		      # enable this if and only if you use HTTPS, this helps Rack
		      # set the proper protocol for doing redirects:
		      # proxy_set_header X-Forwarded-Proto https;

		      # pass the Host: header from the client right along so redirects
		      # can be set properly within the Rack application
		      proxy_set_header Host $http_host;

		      # we don't want nginx trying to do something clever with
		      # redirects, we set the Host: header above already.
		      proxy_redirect off;

		      # set "proxy_buffering off" *only* for Rainbows! when doing
		      # Comet/long-poll stuff.  It's also safe to set if you're
		      # using only serving fast clients with Unicorn + nginx.
		      # Otherwise you _want_ nginx to buffer responses to slow
		      # clients, really.
		      # proxy_buffering off;

		      # Try to serve static files from nginx, no point in making an
		      # *application* server like Unicorn/Rainbows! serve static files.
		      if (!-f $request_filename) {
		        proxy_pass http://app_server;
		        break;
		      }

        #charset koi8-r;

        # access_log  logs/host.access.log  main;
			}
    }

}